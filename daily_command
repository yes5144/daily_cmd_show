####################################
# 1, vim 多行添加注释
#
:45,58s/^/#/g   # 45-58行 添加注释

####################################
# 2, mysql数据库授权
#
> create database jumpserver default charset 'utf8';
> grant all on jumpserver.* to 'jumpserver'@'127.0.0.1' identified by 'somepassword';
> flush privileges;
> show grant for jumpserver@'127.0.0.1';

####################################
# 3, config aliyun Pypi，配置 aliyun-Pypi仓库
#
[ ! -d ~/.pip/ ] && mkdir ~/.pip/

cat >~/.pip/pip.conf <<EOF
[global]
index-url = http://mirrors.aliyun.com/pypi/simple/

[install]
trusted-host=mirrors.aliyun.com

EOF

####################################
# 4, centos7设置字符集，中文支持
#
localedef -c -f UTF-8 -i zh_CN zh_CN.UTF-8
export LC_ALL=zh_CN.UTF-8
echo 'LANG="zh_CN.UTF-8"' > /etc/locale.conf

####################################
# 5, 查询服务是否在线
#
netstat -ntlp |grep mysql
ps -ef |grep mysql
lsof -i :3306
ls -l /proc/PID号

####################################
# 6，mysql添加字段，修改字段，添加索引
#
USE airflow_18_221;
SHOW COLUMNS FROM `task_instance`;
ALTER TABLE `task_instance` ADD COLUMN `max_tries` int(11) DEFAULT '-1';
ALTER TABLE `task_instance` ADD INDEX `ti_job_id` (`job_id`);

ALTER TABLE `variable` MODIFY `val` mediumtext;

####################################
# 7, redis报错
#
redis-cli
6379 > config set stop-writes-on-bgsave-error no

####################################
# 8, 执行了一个alter DDL ,报等待
#
> SHOW PROCESSLIST;
# 
> select trx_state, trx_started, trx_mysql_thread_id, trx_query from information_schema.innodb_trx \G;
# 默认锁一年
> set session lock_wait_timeout = 1800;
> set global lock_wait_timeout = 1800;

####################################
# 9, (1205, 'Lock wait timeout exceeded; try restarting transaction')
#
> show processlist;
> kill trx_mysql_thread_id; #( ID )

# 增加锁等待时间，即增大下面配置项参数值，单位为秒（s）
# innodb_lock_wait_timeout=500

####################################
# 10, 命令组合之 find
# 查找目录下的所有文件中是否含有某个字符串 
find .|xargs grep -ri "IBM" 
# 查找目录下的所有文件中是否含有某个字符串,并且只打印出文件名 
find .|xargs grep -ri "IBM" -l

find airflow |xargs grep -ri 'datetime\.now' --color=auto 
find airflow -type f -print0 | xargs -0 sed -i 's/datetime.utcnow()/datetime.now(tz=None)/g'
find airflow |xargs grep -ri 'datetime\.utcnow' --color=auto
find airflow |xargs grep -ri 'datetime\.now' --color=auto

####################################
# 11， mysql权限详细
#
mysql> REVOKE INSERT ON *.* FROM 'jeffrey'@'localhost';
mysql> show grants for airflow@localhost;
+----------------------------------------------------------------------------------------------------------------+
| Grants for airflow@localhost                                                                                   |
+----------------------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO 'airflow'@'localhost' IDENTIFIED BY PASSWORD '*6D9712F10090993204A9871BD8200AAB8E8CA14E' |
| GRANT ALL PRIVILEGES ON `airflowdb`.* TO 'airflow'@'localhost'                                                 |
| GRANT ALL PRIVILEGES ON `airflow`.* TO 'airflow'@'localhost'                                                   |
+----------------------------------------------------------------------------------------------------------------+

mysql> revoke delete on airflow.* from airflow@localhost;
Query OK, 0 rows affected (0.00 sec)

mysql> show grants for airflow@localhost;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Grants for airflow@localhost                                                                                                                                                                                                       |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO 'airflow'@'localhost' IDENTIFIED BY PASSWORD '*6D9712F10090993204A9871BD8200AAB8E8CA14E'                                                                                                                     |
| GRANT ALL PRIVILEGES ON `airflowdb`.* TO 'airflow'@'localhost'                                                                                                                                                                     |
| GRANT SELECT, INSERT, UPDATE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON `airflow`.* TO 'airflow'@'localhost' |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
3 rows in set (0.00 sec)

# 设置列级别的权限
mysql> GRANT SELECT (col1), INSERT (col1, col2) ON mydb.mytbl TO 'someuser'@'somehost';

####################################
# 12, mysql 排除某个表 备份
#
# //dump数据库database中所有表的结构到database.sql文件中
mysqldump -uroot -p123456 -d database > database.sql

# //dump除过table1和table2其余所有表中的数据追加到database.sql文件中
mysqldump -uroot -p123456 -t --ignore-table=database.table1 --ignore-table=database.table2 >> database.sql

# //dump指定表中的数据
mysqldump -uroot -p123456 -t database table1 table2 > database.sql

# 13, mysql 查询某些表的 大小
#
# 首先打开指定的数据库：
use information_schema;

# 如果想看指定数据库中的数据表，可以用如下语句：
select concat(round(sum(DATA_LENGTH/1024/1024),2),'MB') as data from TABLES where table_schema='DB_NAME' and table_name='TABLE_NAME';

# 如果想看数据库中每个数据表的，可以用如下语句：
SELECT TABLE_NAME,DATA_LENGTH+INDEX_LENGTH,TABLE_ROWS,concat(round((DATA_LENGTH+INDEX_LENGTH)/1024/1024,2), 'MB') as data FROM TABLES WHERE TABLE_SCHEMA='DB_NAME';

####################################
# 14, Python2.7 Python2.7 Python2.7

import sys
import os

print '\033[31m************** before ***************\033[0m'
print sys.path

sys.path.append(os.path.join(sys.path[0], ".."))

print '\033[32m************** after ****************\033[0m'
print sys.path

####################################
# 15, TiDB 暂不支持 alter ... modify  2018-06-15
#
ALTER TABLE task_instance MODIFY duration FLOAT NULL
参考：https://github.com/pingcap/docs/blob/master/sql/mysql-compatibility.md

更多：https://www.pingcap.com/docs-cn/

####################################
# 16, Django Python
#
https://my.oschina.net/jhao104/blog/827344

# 17, python 判断数据类型 list, tuple, dict
#
>>> a = {1:0, 2:1, 3:2}
>>> a 
>>> type(a).__name__ == 'dict'

>>> type(a).__name__ == 'list'


####################################
# 18, TiDB单机安装
# https://wenku.baidu.com/view/90f4e2567dd184254b35eefdc8d376eeafaa176d.html?qq-pf-to=pcqq.group

# centos7 环境
yum install ansible -y
yum install git -y

git clone http://github.com/pingcap/tidb-ansible.git

# 修改inventor 文件
cat tidb-ansible/inventory.ini

tidb ansible_host=127.0.0.1 deploy_dir=/opt/tidb-cluster/tidb
tikv ansible_host=127.0.0.1 deploy_dir=/opt/tidb-cluster/tikv
pd ansible_host=127.0.0.1 deploy_dir=/opt/tidb-cluster/pd


monitor ansible_host=127.0.0.1 deploy_dir=/opt/tidb-cluster/monitor
grafana ansible_host=127.0.0.1 deploy_dir=/opt/tidb-cluster/grafana

[monitored_servers:children]
tidb_servers
tikv_servers
pd_servers

## Binlog Part
[pump_servers:children]
tidb_servers

## .....

## Connection
# ssh via root
ansible_user = root
ansible_become = true
ansible_become_user = tidb
ansible_ssh_pass = 123456

# ssh via normal user
# ansible_user = tidb

cluster_name = MyTiDB

tidb_version = latest

# deployment methods, [binary, docker]
deployment_method = binary

# process supervision, [systemd, supervise]
process_supervision = systemd

# timezone of deployment region
timezone = Asia/Shanghai
set_timezone = True

# misc
enable_elk = False
enable_firewalld = False

# check NTP service
enable_ntpd = False
machine_benchmark = True
set_hostname = False

# binlog trigger
enable_binlog = False

# zookeeper address of kafka cluster, example
# zookeeper_addr = ""
zookeeper_addr = ""
# store slow query log into seperate file
enable_slow_query_log = False

# KV mode
deploy_without_tidb = False

####################################
# 接下来就可以进入到tidb-ansible目录安装了
# 执行如下： 下载二进制文件 和设置系统环境：
ansible-playbook local_prepare.yml
ansible-playbook bootstrap.yml

# 安装，不开监控，需要conf里面的。。。
ansible-playbook deploy.yml

# 启动 -l 指定启动服务
ansible-playbook start.yml -l tikv,tidb,pd

# 安装mysql客户端
rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm
yum install mysql-community-client

# 登录 tidb
mysql -uroot -h127.0.0.1 -P4000


### tispark
cd /opt/tidb-cluster/tidb/spark/bin/
./spark-shell --conf spark.tispark.pd.address=127.0.0.1:2379

####################################
# 19, mysql 函数3个

-- left(FROM_UNIXTIME(时间戳),10)
-- UNIX_TIMESTAMP('2018-06-06 00:00:00')
-- FROM_UNIXTIME('时间戳')

SELECT
	left(FROM_UNIXTIME(createRoleTime),10) as '创建角色日期',
  left(FROM_UNIXTIME(dtEventTime),10) as '战斗日期',
  COUNT(DISTINCT lRoleId) AS '战斗人数',
  COUNT(*) AS '战斗次数'
FROM
	`tbllog_battle_end`
WHERE
	createRoleTime > UNIX_TIMESTAMP('2018-06-05 00:00:00')
  AND createRoleTime < UNIX_TIMESTAMP('2018-06-06 00:00:00')
  AND dtEventTime > UNIX_TIMESTAMP('2018-06-05 00:00:00')
  AND dtEventTime < UNIX_TIMESTAMP('2018-06-11 00:00:00')
GROUP BY left(FROM_UNIXTIME(dtEventTime),10) ;

####################################
# 20, docker 常用的命令

# 最好是centos7系统，docker需要内核3.0
yum -y install docker
yum -y install docker-compose

# 参考TiDB的部署：https://pingcap.com/docs-cn/op-guide/docker-compose/

# 首先写好自己的 compose.yml文件
docker-compose pull

	#1.停止所有的container，这样才能够删除其中的images：

docker stop $(docker ps -a -q)

	#如果想要删除所有container的话再加一个指令：

docker rm $(docker ps -a -q)

	#2.查看当前有些什么images

docker images

	#3.删除images，通过image的id来指定删除谁

docker rmi <image id>

####################################
# 21，crontab 常用操作
# 
# 30 23 * * * /usr/local/etc/rc.d/lighttpd restart
crontab -l  # 查看
crontab -e  # 默认在/var/spool/cron/root
crontab -r  # 删除目前的日程
# 
vim /etc/crontab
# 
/etc/init.d/crod relod

####################################
# 22, 解压和 压缩
#
[root@linux ~]# tar -cvf /tmp/etc.tar /etc       #<==仅打包，不压缩！

[root@linux ~]# tar -czvf /tmp/etc.tar.gz /etc   #<==打包后，以 gzip 压缩

[root@linux ~]# tar -cjvf /tmp/etc.tar.bz2 /etc  #<==打包后，以 bzip2 压缩

# more:  https://www.cnblogs.com/centos2017/p/7896807.html

####################################
# 2018-07-30
# sed and grep

# 打印出 ** 和 ** 之间的日志记录
sed -n '/2018-07-29T05:23:15+08:00/,/2018-07-30T03:59:34+08:00/p' test_88_json_access.log

grep -v "^\["  airflow.cfg
grep "^\[" airflow.cfg --color=auto

####################################
# 2018-07-31
# Linux 15分钟负载多少算是正常呢？
#
# 有人说：如果这个数值 "除以" 逻辑CPU的数量，不大于5就OK！
#
# 仅供参考


####################################
# 2018-08-02
# 查找最大文件
# 
sudo du -s * | sort -nr | head   显示前10个占用空间最大的文件或目录

sudo du --max-depth=1         linux查找占空间最大的文件与目录  

sudo find / -size +204800        这样可以查找出大于100M的文件,按需求删除就可

sudo find ./ -size +2048c             查找大于2K的文件，+ 表示大于

sudo find ./ -size -2048c -type f     查找小于2K的文件，- 表示小于

du -sh ./* sort 

find // -xdev -type f -size +10000000c -exec ls -lad {} \;  


####################################
# 2018-08-03
# 删除 airflow 执行失败dag的记录
#
# 在 airflow 所在的MySQL数据库执行如下命令：

delete from dag_run where dag_id='your_dag_id' and state="failed";

DELETE FROM `dag_stats` where dag_id='your_dag_id' and state='failed';


####################################
# 2018-08-03
# mysql 性能监控 qps, tps, iops
# 
QPS (Query per second) （每秒查询量）
TPS(Transaction per second) （每秒事务量，如果是InnoDB会显示，没有InnoDB就不会显示）

计算方法
___________________________________________________________
QPS
Questions = SHOW GLOBAL STATUS LIKE 'Questions';
Uptime = SHOW GLOBAL STATUS LIKE 'Uptime';
QPS=Questions/Uptime
TPS
Com_commit = SHOW GLOBAL STATUS LIKE 'Com_commit';
Com_rollback = SHOW GLOBAL STATUS LIKE 'Com_rollback';
Uptime = SHOW GLOBAL STATUS LIKE 'Uptime';
TPS=(Com_commit + Com_rollback)/Uptime

####################################
# 2018-09-30
import time,datetime

today = datetime.date.today()
yestoday = today - datetime.timedelta(days=1)

print yestoday

i = 4
while i > 0:
    day2 = today - datetime.timedelta(days=i)
    day1 = today - datetime.timedelta(days=(i - 1))
    print day2, '  ', day1
    i = i - 1
